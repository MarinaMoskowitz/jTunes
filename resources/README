Interfaces:
    Model:
        - IMusicModel: an overview of the operations that our music editor to be able to do.
                 These operations include adding a note to a song, removing a note from a song,
                 playing to songs at the same time, playing one song right after another song.
        - INote: overview of the operations that we are able to do with a note.
                 These operations include getting the Pitch, which we use our my song class to get
                 the pitches in a song, and getting the octave, which we also use in our song class
                 to get all the pitches in a song.
        - ISong: overview of the operations that we want to be able to do with a song.
    Controller:
        - IMusicController: operation to run our music editor
    Util: an interface that represents a build of compositions
    View:
        - IMidiView: an overview of the operations that our Midi is able to do
        - IMusicView: Holds all the methods needed for a view and also holds the methods to display
                 a view.

Classes:
    Model:
        - MusicModel: adds a note to a song, removes a note from a song, plays two songs at
                      the same time, and plays one song right after another song.
                      Helper methods include getEndBeat, getLastBeat, and makeHead.
        - Note: gets the pitch of a note and the octave of a note.
          A Note as a pitch, octave, and beats in a note.
          Added in HW6, a note can also have a pitch, octave, instrument, and volume level.
          In a note, the pitch cannot be null, the bpm of the beats must be greater than 1,
          the octave of a note must be greater than one.
          In our note class I also rewrote the equals method and HashCode methodd so we could be
          sure that when comparing two Notes they are the same instance of each other, not just a
          reference of each other. We also rewrote the compareTo method, so I can compare the values
          of two notes to each other.
          Added in HW6, we also added getter methods for instrument and volume, and well as a
          method to get the duration of a note, and finally, a method that creates MIDI data for a
          note. These additions are also reflected in the interface.
        - Song: A Song is represented as a TreeMap, with the keys represented as Integers for beats
          for a song that contains notes, and a List of Notes to represent the values for notes at
          those beats.
          Added in HW6, we added a variable to get the tempo of a song, and also methods which
          sets the tempo of a song and gets the tempo of a song. There changes are also reflected
          in the interface.
          We updated the constructor so a temp cannot be less than zero.
          We also added a static CompositionBuilder class, which implements the CompositionBuilder
          in the controller. In this classes we overrode the setTempo and addNote methods.
        - Pitch: represented as an Enum because there can only be a set of twelve distinct pitches
                 in music.
    Controller:
        - A controller that connects the model and the view.
    Util:
        - MusicReader: Reads music data and construct a music composition from it.
    View:
        - KeysPanel: Represents the keys that are currently being played.
        - MusicView: Displays all the views.
        - NotesPanel: Shows which notes are playing for the beats.
        - MidiViewImpl: Represents a view in which a song is rendered in Midi messages
                        so it can be heard.
        - MidiMock: Emulates a Synthesizer object to create a log that stores MidiMessages sent to
                    a Receiver for testing purposes.
        - MockReceiver: Emulates a Receiver object, to create a log that stores MidiMessages sent
                    to a Receiver for testing purposes.

